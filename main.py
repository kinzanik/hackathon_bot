import torch
import torch.nn as nn
import logging
import telebot
import sqlite3
import threading
from termcolor import colored
import speech_recognition
from stt import *
from model_ai import *


bot = telebot.TeleBot('7176018058:AAGfuFcUxilC8zVh49bA2LIZcxmsgEvfvIs')
conn = sqlite3.connect('sqlite_db.sqlite', check_same_thread=False)
cursor = conn.cursor()
lock = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def record_and_recognize_audio(*args: tuple, do='default'):
    pass


def get_mes(message, caption=None):
    with lock:
        sql_query = "INSERT or REPLACE INTO users_id (name, last_name, tag, id) VALUES (?, ?, ?, ?)"
        cursor.execute(sql_query, (message.from_user.first_name, message.from_user.last_name,
                                   message.from_user.username, message.from_user.id))
        conn.commit()

    if message.from_user.id == 2071811935:
        bot.reply_to(message, '–∏–¥–∏ –Ω–∞—Ö—É–π')
    if caption is None:
        text = message.text
    else:
        text = caption
    if message.from_user.last_name is None:
        return f'{colored(message.from_user.first_name, "green")}: {text}'
    return (f'{colored(message.from_user.first_name, "green")} {colored(message.from_user.last_name, "green")}:'
            f' {text}')


# –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class QuestionAnalyzer(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(QuestionAnalyzer, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        return out


def get_answer(question):
    return knowledge_base.get(question,
                              "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º?")


def call_curator():
    return "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∂–∏–≤–æ–π –∫—É—Ä–∞—Ç–æ—Ä."


@bot.message_handler(content_types=['voice'])
def voice_handler(message):
    voice_duration = message.voice.duration
    minutes = voice_duration // 60
    seconds = voice_duration % 60
    print(get_mes(message, caption=f'<Voice message {minutes:02}:{seconds:02}>'))
    file = bot.get_file(message.voice.file_id)
    bytes = bot.download_file(file.file_path)
    with open('voice.ogg', 'wb') as f:
        f.write(bytes)
    text = speech_to_text()
    if text is None:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        answer_text = predict_answer_with_text(text)
        print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", answer_text)
        bot.send_message(message.chat.id, answer_text)




@bot.message_handler(commands=['start'])
def start(message):
    print(get_mes(message))
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üñê\n"
                          f"–Ø —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–∏–ª–æ—Ç–∞!\n"
                          f"–ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@bot.message_handler(commands=['help'])
def help(message):
    print(get_mes(message))
    help_message = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
    help_message += "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
    help_message += "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö\n"
    bot.send_message(message.chat.id, help_message)


@bot.message_handler(commands=['call_curator'])
def call_curator(message):
    print(get_mes(message))
    bot.reply_to(message, call_curator())


@bot.message_handler(func=lambda message: True)
def answer_question(message):
    print(get_mes(message))
    question = message.text
    answer_text = predict_answer_with_text(question)
    print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", answer_text)
    bot.reply_to(message, answer_text)


print('–ó–∞–ø—É—â–µ–Ω–æ')
bot.polling()