import torch
import torch.nn as nn
import logging
import telebot
import sqlite3
import threading
from termcolor import colored
import speech_recognition


bot = telebot.TeleBot('7176018058:AAGfuFcUxilC8zVh49bA2LIZcxmsgEvfvIs')
conn = sqlite3.connect('sqlite_db.sqlite', check_same_thread=False)
cursor = conn.cursor()
lock = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
knowledge_base = {
    "–£—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è": "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è "
                                                          "–≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ": "–£—Ä–æ–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è": "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∏–¥–µ–æ—É—Ä–æ–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö "
                                      "–∑–∞–¥–∞–Ω–∏–π.",
    "–°—Ä–æ–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º": "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞. –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                                   "–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.",
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∏ –∫–∞–Ω–∏–∫—É–ª": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –ö–∞–Ω–∏–∫—É–ª—ã –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –≤ "
                                    "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—á–µ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª–æ–≤–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å–µ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–£—Å–ª–æ–≤–∏—è –æ–±—É—á–µ–Ω–∏—è' –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è "
                                       "–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å "
                                                      "–≤ –Ω–∞—à—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ –ü–û": "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º—É –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ "
                                                  "–Ω–∞—à–µ–º —Å–∞–π—Ç–µ.",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ": "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. "
                                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à –æ—Ç–¥–µ–ª –∫–∞—Ä—å–µ—Ä—ã –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏."
}


def get_mes(message, caption=None):
    with lock:
        sql_query = "INSERT or REPLACE INTO users_id (name, last_name, tag, id) VALUES (?, ?, ?, ?)"
        cursor.execute(sql_query, (message.from_user.first_name, message.from_user.last_name,
                                   message.from_user.username, message.from_user.id))
        conn.commit()

    if message.from_user.id == 2071811935:
        bot.reply_to(message, '–∏–¥–∏ –Ω–∞—Ö—É–π')
    if caption is None:
        text = message.text
    else:
        text = caption
    if message.from_user.last_name is None:
        return f'{colored(message.from_user.first_name, "green")}: {text}'
    return (f'{colored(message.from_user.first_name, "green")} {colored(message.from_user.last_name, "green")}:'
            f' {text}')


# –ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class QuestionAnalyzer(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(QuestionAnalyzer, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)
        return out


def get_answer(question):
    return knowledge_base.get(question,
                              "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∂–∏–≤—ã–º –∫—É—Ä–∞—Ç–æ—Ä–æ–º?")


def call_curator():
    return "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∂–∏–≤–æ–π –∫—É—Ä–∞—Ç–æ—Ä."


@bot.message_handler(commands=['start'])
def start(message):
    print(get_mes(message))
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üñê\n"
                          f"–Ø —á–∞—Ç-–±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–∏–ª–æ—Ç–∞!\n"
                          f"–ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@bot.message_handler(commands=['help'])
def help(message):
    print(get_mes(message))
    help_message = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
    help_message += "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
    help_message += "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö\n"
    bot.send_message(message.chat.id, help_message)


@bot.message_handler(commands=['call_curator'])
def call_curator(message):
    print(get_mes(message))
    bot.reply_to(message, call_curator())


@bot.message_handler(func=lambda message: True)
def answer_question(message):
    print(get_mes(message))
    question = message.text
    answer = get_answer(question)
    bot.reply_to(message, answer)


print('–ó–∞–ø—É—â–µ–Ω–æ')
bot.polling()